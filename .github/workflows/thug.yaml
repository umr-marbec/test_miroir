name: GitHub to Git Mirror with Release Assets

on:
  push:   # Déclenche sur n'importe quel push sur n'importe quelle branche
    branches:
      - '**'  # Toutes les branches
    tags:
      - '**'  # Déclenche pour tous les pushs de tags
  pull_request:   # Déclenche aussi sur toute Pull Request
    branches:
      - '**'  # Toutes les branches
  delete:
    branches:
      - '**'  # Déclenche sur la suppression de n'importe quelle branche
    tags:
      - '**'  # Déclenche lors de la suppression de tous les tags
  release:
    types:
      - created  # Déclenche lors de la création d'une release
      - published  # Déclenche lors de la publication d'une release
      - updated  # Déclenche lors de la mise à jour d'une release
      - deleted  # Déclenche lors de la suppression d'une release

jobs:
  mirror:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository as bare
        run: |
          git clone --bare https://github.com/umr-marbec/test_miroir.git mon-depot-github.git

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@users.noreply.github.com"

      - name: Add forge remote
        run: |
          cd mon-depot-github.git
          git remote add mirror https://oauth2:${{ secrets.FORGE_TOKEN }}@forge.ird.fr/marbec/test_miroir_github.git
  
      - name: Push to forge
        run: |
          cd mon-depot-github.git
          git push --mirror mirror

  download-release-assets:
    runs-on: ubuntu-latest
    needs: mirror # Attendre que le job "mirror" se termine

    steps:
      - name: Set up Git (Release Job)
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global init.defaultBranch main  # Définit la branche initiale à 'main'

      - name: Debug API response (Assets)
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Utilisez le PAT si nécessaire
        run: |
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/umr-marbec/test_miroir/releases/${RELEASE_ID}/assets")
          echo "API Response: $RESPONSE"
          echo "$RESPONSE" | jq
        
      - name: Fetch the latest release
        id: fetch_release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Utilisez le PAT ici
        run: |
          RELEASE=$(curl -s -w "%{http_code}" -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/umr-marbec/test_miroir/releases/${RELEASE_ID}/assets")
          echo "Response Code: $RESPONSE"
          if [ "${RESPONSE}" -ge 400 ]; then
            echo "Error fetching release assets. HTTP status code: $RESPONSE"
            exit 1
          fi
          echo "$RESPONSE" | jq

      - name: Download release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ASSETS=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/umr-marbec/test_miroir/releases/${RELEASE_ID}/assets" \
            | jq -r '.[].browser_download_url')

          echo "Assets URLs detected:"
          echo "$ASSETS"

          mkdir release-assets
          cd release-assets

          if [ -z "$ASSETS" ]; then
            echo "No assets found for this release."
            exit 0
          fi

          for URL in $ASSETS; do
            echo "Downloading $URL"
            curl -L -o "$(basename $URL)" -H "Authorization: token $GITHUB_TOKEN" "$URL"
          done

      - name: Verify assets exist
        run: |
          if [ -z "$(ls -A release-assets)" ]; then
            echo "No files downloaded. Exiting."
            exit 0
          fi

      - name: Upload release assets to forge
        run: |
          cd release-assets
          git init
          git remote add origin https://oauth2:${{ secrets.FORGE_TOKEN }}@forge.ird.fr/marbec/test_miroir_github.git
          git checkout -b release-assets
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit. Exiting."
            exit 0
          fi
          git commit -m "Add release assets"
          git push -u origin release-assets --force
