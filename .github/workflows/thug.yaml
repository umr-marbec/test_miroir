name: GitHub to Git Mirror with Release Assets

on:
  push:   # Déclenche sur n'importe quel push sur n'importe quelle branche
    branches:
      - '**'  # Toutes les branches
    tags:
      - '**'  # Déclenche pour tous les pushs de tags
  pull_request:   # Déclenche aussi sur toute Pull Request
    branches:
      - '**'  # Toutes les branches
  delete:
    branches:
      - '**'  # Déclenche sur la suppression de n'importe quelle branche
    tags:
      - '**'  # Déclenche lors de la suppression de tous les tags
  release:
    types:
      - created  # Déclenche lors de la création d'une release
      - published  # Déclenche lors de la publication d'une release
      - updated  # Déclenche lors de la mise à jour d'une release
      - deleted  # Déclenche lors de la suppression d'une release

jobs:
  mirror:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository as bare
        run: |
          git clone --bare https://github.com/umr-marbec/test_miroir.git mon-depot-github.git

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@users.noreply.github.com"

      - name: Add forge remote
        run: |
          cd mon-depot-github.git
          git remote add mirror https://oauth2:${{ secrets.FORGE_TOKEN }}@forge.ird.fr/marbec/test_miroir_github.git
  
      - name: Push to forge
        run: |
          cd mon-depot-github.git
          git push --mirror mirror

  download-release-assets:
      runs-on: ubuntu-latest
      needs: mirror # Attendre que le job "mirror" se termine

      steps:
        - name: Set up Git (Authentication)
          run: |
            git config --global user.name "GitHub Actions"
            git config --global user.email "github-actions@users.noreply.github.com"

        - name: Fetch latest release from GitHub
          id: fetch_releases
          run: |
            # Récupérer les informations de la dernière release
            RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/umr-marbec/test_miroir/releases")

            # Afficher la réponse complète de l'API pour debug
            echo "API Response: $RESPONSE"
            
            # Extraire les IDs et les noms des releases
            # Extraire les IDs et les noms des releases
            RELEASE_IDS_NAMES=$(echo "$RESPONSE" | jq -r '.[] | "\(.id) \(.name)"')

            # Vérifier si les informations sont extraites correctement
            if [ -z "$RELEASE_IDS_NAMES" ]; then
              echo "No release found. No action required."
              echo "SKIP_NEXT_STEP=true" >> $GITHUB_ENV
              exit 0
            fi

            NUM_RELEASES=$(echo "$RELEASE_IDS_NAMES" | wc -l)
            echo "Number of releases found: $NUM_RELEASES"

            echo "$RELEASE_IDS_NAMES"

            echo "RELEASE_IDS_NAMES=$RELEASE_IDS_NAMES" >> $GITHUB_ENV

        - name: Download release assets from GitHub
          id: download_assets
          if: ${{ env.SKIP_NEXT_STEP != 'true' }}
          run: |
            ASSETS_FOUND=false
            # Récupérer RELEASE_IDS_NAMES depuis l'environnement global
            RELEASE_IDS_NAMES="${{ env.RELEASE_IDS_NAMES }}"
            # Boucle pour itérer sur chaque ID et nom de release
            while IFS= read -r line; do
              echo "Line: $line"  # Affiche chaque ligne avant traitement
              RELEASE_ID=$(echo "$line" | awk '{print $1}')
              RELEASE_NAME=$(echo "$line" | awk '{print $2}')
              echo "Processing release ID: $RELEASE_ID with Name: $RELEASE_NAME"
              # Télécharger les assets de la release
              ASSETS=$(curl -s \
                -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                "https://api.github.com/repos/umr-marbec/test_miroir/releases/$RELEASE_ID/assets" \
                | jq -r '.[].browser_download_url')
              if [ -z "$ASSETS" ]; then
                echo "No assets found for release $RELEASE_ID ($RELEASE_NAME). Skipping download step."
                continue
              else
                ASSETS_FOUND=true
                # Créer un répertoire pour les assets de la release
                mkdir -p "release-assets/$RELEASE_ID"_"$RELEASE_NAME"
                cd "release-assets/$RELEASE_ID"_"$RELEASE_NAME"
        
                for URL in $ASSETS; do
                  echo "Downloading $URL"
                  curl -L -o "$(basename "$URL")" -H "Authorization: token ${{ secrets.PAT_TOKEN }}" "$URL"
                done
        
                cd -
              fi
            done <<< "$RELEASE_IDS_NAMES"
            if [ "$ASSETS_FOUND" = false ]; then
              echo "No assets found for any release. Exiting."
              echo "SKIP_NEXT_STEP=true" >> $GITHUB_ENV
              exit 0
            fi

        - name: Push assets to mirror repository
          id: push_mirror
          if: ${{ env.SKIP_NEXT_STEP != 'true' }}
          run: |
            # Cloner le dépôt miroir
            git clone https://oauth2:${{ secrets.FORGE_TOKEN }}@forge.ird.fr/marbec/test_miroir_github.git
            cd test_miroir_github

            # Supprimer le répertoire release-assets du miroir s'il existe
            if [ -d "release-assets" ]; then
              echo "Removing existing release-assets directory from the mirror repository."
              rm -rf release-assets
            fi

            # Copier le répertoire local des assets téléchargés dans le miroir
            echo "Copying local release-assets directory to the mirror repository."
            cp -r "../release-assets" .

            # Ajouter les fichiers et les commits
            git add .
            git commit -m "Add release assets from GitHub releases"

            # Récupérer le nom de la branche principale
            BRANCH_NAME=$(git symbolic-ref --short HEAD)

            # Pousser les changements sur la branche principale
            git push origin "$BRANCH_NAME"
