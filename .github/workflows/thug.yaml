name: GitHub to Git Mirror with Release Assets

on:
  push:   # Déclenche sur n'importe quel push sur n'importe quelle branche
    branches:
      - '**'  # Toutes les branches
    tags:
      - '**'  # Déclenche pour tous les pushs de tags
  pull_request:   # Déclenche aussi sur toute Pull Request
    branches:
      - '**'  # Toutes les branches
  delete:
    branches:
      - '**'  # Déclenche sur la suppression de n'importe quelle branche
    tags:
      - '**'  # Déclenche lors de la suppression de tous les tags
  release:
    types:
      - created  # Déclenche lors de la création d'une release
      - published  # Déclenche lors de la publication d'une release
      - updated  # Déclenche lors de la mise à jour d'une release
      - deleted  # Déclenche lors de la suppression d'une release

jobs:
  mirror:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository as bare
        run: |
          git clone --bare https://github.com/umr-marbec/test_miroir.git mon-depot-github.git

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@users.noreply.github.com"

      - name: Add forge remote
        run: |
          cd mon-depot-github.git
          git remote add mirror https://oauth2:${{ secrets.FORGE_TOKEN }}@forge.ird.fr/marbec/test_miroir_github.git
  
      - name: Push to forge
        run: |
          cd mon-depot-github.git
          git push --mirror mirror

  download-release-assets:
      runs-on: ubuntu-latest
      needs: mirror # Attendre que le job "mirror" se termine

      steps:
        - name: Set up Git (Authentication)
          run: |
            git config --global user.name "GitHub Actions"
            git config --global user.email "github-actions@users.noreply.github.com"

        - name: Fetch latest release from GitHub
          id: fetch_release
          run: |
            # Récupérer les informations de la dernière release
            RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/umr-marbec/test_miroir/releases/latest")

            # Afficher la réponse complète de l'API pour debug
            echo "API Response: $RESPONSE"
            
            # Extraire l'ID et le nom de la release
            RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
            RELEASE_NAME=$(echo "$RESPONSE" | jq -r '.name' | tr ' ' '_')

            # Vérifier si les informations sont extraites correctement
            if [ -z "$RELEASE_ID" ] || [ -z "$RELEASE_NAME" ]; then
              echo "Failed to extract release information. Exiting."
              exit 1
            fi

            echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
            echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

        - name: Download release assets from GitHub
          run: |
            # Télécharger les assets de la release
            ASSETS=$(curl -s \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/umr-marbec/test_miroir/releases/${RELEASE_ID}/assets" \
              | jq -r '.[].browser_download_url')

            if [ -z "$ASSETS" ]; then
              echo "No assets found for this release. Skipping download step."
              echo "assets_found=false" >> $GITHUB_ENV
            else
              # Créer un répertoire sécurisé pour les assets
              mkdir -p "release-assets/${RELEASE_ID}_${RELEASE_NAME}"
              cd "release-assets/${RELEASE_ID}_${RELEASE_NAME}"

              for URL in $ASSETS; do
                echo "Downloading $URL"
                curl -L -o "$(basename "$URL")" -H "Authorization: token $GITHUB_TOKEN" "$URL"
              done

              echo "assets_found=true" >> $GITHUB_ENV
            fi

        - name: Push assets to mirror repository
          if: env.assets_found == 'true'
          run: |
            # Cloner le dépôt miroir
            git clone https://oauth2:${{ secrets.FORGE_TOKEN }}@forge.ird.fr/marbec/test_miroir_github.git
            cd test_miroir_github

            # Définir les répertoires source et cible
            SOURCE_DIR="../release-assets/${{ env.RELEASE_ID }}_${{ env.RELEASE_NAME }}"
            TARGET_BASE_DIR="release-assets"
            TARGET_DIR="${TARGET_BASE_DIR}/${{ env.RELEASE_ID }}_${{ env.RELEASE_NAME }}"

            # Vérifier si le répertoire source existe
            if [ -d "$SOURCE_DIR" ]; then
              # Créer un sous-répertoire pour la release spécifique
              mkdir -p "$TARGET_DIR"

              # Copier les fichiers de la release dans son sous-répertoire dédié
              echo "Copying assets for release ID: ${{ env.RELEASE_ID }}, Name: ${{ env.RELEASE_NAME }}"
              cp -r "$SOURCE_DIR"/* "$TARGET_DIR/"

              # Ajouter les fichiers dans Git sans toucher aux autres releases
              git add "$TARGET_BASE_DIR"

              # Vérifier s'il y a des modifications
              if git diff --cached --quiet; then
                echo "No changes to commit for this release."
              else
                git commit -m "Add assets for release: ${{ env.RELEASE_NAME }} (ID: ${{ env.RELEASE_ID }})"
                git push origin main
                echo "Assets committed and pushed successfully."
              fi
            else
              echo "Error: Source directory '$SOURCE_DIR' does not exist."
              exit 1
            fi
