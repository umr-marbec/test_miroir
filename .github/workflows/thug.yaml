name: GitHub to Git Mirror with Release Assets

on:
  push:   # Déclenche sur n'importe quel push sur n'importe quelle branche
    branches:
      - '**'  # Toutes les branches
    tags:
      - '**'  # Déclenche pour tous les pushs de tags
  pull_request:   # Déclenche aussi sur toute Pull Request
    branches:
      - '**'  # Toutes les branches
  delete:
    branches:
      - '**'  # Déclenche sur la suppression de n'importe quelle branche
    tags:
      - '**'  # Déclenche lors de la suppression de tous les tags
  release:
    types:
      - created  # Déclenche lors de la création d'une release
      - published  # Déclenche lors de la publication d'une release
      - updated  # Déclenche lors de la mise à jour d'une release
      - deleted  # Déclenche lors de la suppression d'une release

jobs:
  mirror:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository as bare
        run: |
          git clone --bare https://github.com/umr-marbec/test_miroir.git mon-depot-github.git

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@users.noreply.github.com"

      - name: Add forge remote
        run: |
          cd mon-depot-github.git
          git remote add mirror https://oauth2:${{ secrets.FORGE_TOKEN }}@forge.ird.fr/marbec/test_miroir_github.git
  
      - name: Push to forge
        run: |
          cd mon-depot-github.git
          git push --mirror mirror

  download-release-assets:
    runs-on: ubuntu-latest
    needs: mirror # Attendre que le job "mirror" se termine

    steps:
      - name: Set up Git (Authentication)
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@users.noreply.github.com"

      - name: Fetch latest release from GitHub
        id: fetch_release
        run: |
          # Récupérer les informations de la dernière release
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/umr-marbec/test_miroir/releases/latest")

          # Afficher la réponse complète de l'API pour debug
          echo "API Response: $RESPONSE"
          
          # Extraire l'ID de la release
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')

          # Vérifier si RELEASE_ID a bien été extrait
          echo "Release ID: $RELEASE_ID"
          
          # Si RELEASE_ID est vide, échouer explicitement pour déboguer
          if [ -z "$RELEASE_ID" ]; then
            echo "Release ID is empty. Exiting."
            exit 1
          fi

          # Extraire le nom de la release
          RELEASE_NAME=$(echo "$RESPONSE" | jq -r '.name')
          echo "Release name: $RELEASE_NAME"

          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV  # Passer l'ID de release comme variable d'environnement
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV  # Passer le nom de release comme variable d'environnement

      - name: Download release assets from GitHub
        run: |
          # Télécharger les assets de la release
          ASSETS=$(curl -s \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/umr-marbec/test_miroir/releases/${RELEASE_ID}/assets" \
            | jq -r '.[].browser_download_url')

          # Vérifier si des assets sont trouvés
          if [ -z "$ASSETS" ]; then
            echo "No assets found for this release. Skipping download step."
            echo "assets_found=false" >> $GITHUB_ENV
          else
            # Créer un répertoire pour les assets
            mkdir -p "release-assets/${RELEASE_NAME}"
            cd "release-assets/${RELEASE_NAME}"

            # Télécharger les fichiers des assets
            for URL in $ASSETS; do
              echo "Downloading $URL"
              curl -L -o "$(basename "$URL")" -H "Authorization: token $GITHUB_TOKEN" "$URL"
            done
            echo "assets_found=true" >> $GITHUB_ENV
          fi

      - name: Push assets to mirror repository
        if: env.assets_found == 'true'
        run: |
          # Cloner le dépôt miroir
          git clone https://oauth2:${{ secrets.FORGE_TOKEN }}@forge.ird.fr/marbec/test_miroir_github.git
          cd test_miroir_github

          # Créer un répertoire pour les assets associés au nom de la release
          mkdir -p release-assets/${{ env.RELEASE_NAME }}

          # Copier les assets téléchargés dans ce répertoire sans supprimer les anciens
          cp -n ../release-assets/${{ env.RELEASE_NAME }}/* release-assets/${{ env.RELEASE_NAME }}/

          # Ajouter, committer et pousser les changements
          git add release-assets/${{ env.RELEASE_NAME }}/*
          git commit -m "Add assets for release: ${{ env.RELEASE_NAME }}"

          # Vérifier si la branche 'main' existe et y basculer, sinon la créer
          git fetch origin
          git checkout main || git checkout -b main

          # Pousser les changements sur la branche 'main'
          git push origin main
